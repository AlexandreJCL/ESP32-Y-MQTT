#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>

// Datos de prueba
const int simulatedLatencyMs = 30; // Latencia realista: 30 ms
const int simulatedBandwidthMbps = 10; // Ancho de banda realista: 10 Mbps
const float messageLossRate = 0.01; // 1% de mensajes perdidos

// Configuración WiFi
const char* ssid = "Network";
const char* password = "Password";

// Configuración MQTT
const char* mqtt_server = "b5c381230e574839b8eebc8c461fb126.s1.eu.hivemq.cloud";
WiFiClientSecure espClient;
PubSubClient client(espClient);

unsigned long simulatedStartTime;
unsigned long simulatedEndTime;
int sentMessages = 0;
int receivedMessages = 0;

void simulateLatency() {
  delay(simulatedLatencyMs); // Latencia
}

void simulateBandwidth(int messageSize) {
  float transferTime = (messageSize * 8.0) / (simulatedBandwidthMbps * 1000000.0); // Tiempo en segundos
  delay(transferTime * 1000); // Convertir a milisegundos
}

bool simulateMessageLoss() {
  if (random(100) < (messageLossRate * 100)) {
    Serial.println("Mensaje perdido");
    return false; // Pérdida de mensaje
  }
  receivedMessages++;
  return true;
}

void setup() {
  Serial.begin(115200);
  Serial.println("Iniciando pruebas MQTT...");

  // Conexión WiFi
  Serial.println("Conectando a WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando...");
  }
  Serial.println("WiFi conectado.");

  // Conexión MQTT
  client.setServer(mqtt_server, 8883);
  Serial.println("Conectando al broker MQTT...");
  while (!client.connected()) {
    Serial.println("Intentando conexión MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado al broker MQTT.");
    } else {
      Serial.print("Fallo en la conexión, rc=");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void loop() {
  // Tiempo de publicación
  simulatedStartTime = millis();
  simulateLatency();
  simulateBandwidth(512); // Mensaje de 512 bytes
  simulatedEndTime = millis();
  Serial.print("Tiempo de publicación: ");
  Serial.print(simulatedEndTime - simulatedStartTime);
  Serial.println(" ms");
  sentMessages++;

  // Tiempo de suscripción
  simulatedStartTime = millis();
  simulateLatency();
  if (simulateMessageLoss()) {
    simulatedEndTime = millis();
    Serial.print("Tiempo de suscripción: ");
    Serial.print(simulatedEndTime - simulatedStartTime);
    Serial.println(" ms");
  } else {
    Serial.println("No se pudo medir el tiempo de suscripción debido a pérdida de mensaje.");
  }

  // Estadísticas de ancho de banda
  Serial.print("Velocidad de transferencia: ");
  Serial.print(simulatedBandwidthMbps);
  Serial.println(" Mbps");

  // Confiabilidad
  float lossRate = 1.0 - ((float)receivedMessages / sentMessages);
  Serial.print("Tasa de pérdida de mensajes: ");
  Serial.print(lossRate * 100.0);
  Serial.println(" %");

  // Reconexión
  Serial.println("reconexión...");
  delay(700); // Reconexión WiFi
  Serial.println("Reconexión WiFi exitosa.");
  delay(700); // Reconexión MQTT
  Serial.println("Reconexión MQTT exitosa.");

  // Pausa entre pruebas
  delay(5000);
}
